@using GCCSI_CO2RE.Models

@model GCCSI_CO2RE.Models.PolicyListData

@using (Html.BeginForm())
{ 
    <div>
        <fieldset>

            @if (ViewBag.IsUpdate == true)

            {

                @Html.HiddenFor(model => model.PolicyListDataID)

            }


            <table id="editableGrid" class="table table-striped table-bordered dt-responsive wrap" cellspacing="0" style="table-layout:fixed; font-size:12px; margin-top:1.5rem" >
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Country)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PolicyListOption)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PolicyName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PolicyDescription)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PolicyURL)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PolicyListStatus)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Year)
                        </th>
                    </tr>
                </thead>             
                    <tr>
                        <td>
                            @Html.DropDownList("CountryID", null, htmlAttributes: new { @id= "countryDropDown", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CountryID, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.DropDownList("PolicyListOptionID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PolicyListOptionID, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.PolicyName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PolicyName, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.PolicyDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PolicyDescription, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.PolicyURL, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PolicyURL, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.DropDownList("PolicyListStatusID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PolicyListStatusID, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.DropDownList("YearID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.YearID, "", new { @class = "text-danger" })
                        </td>
                    </tr>
            </table>
            
            <div>
                <div class="editor-label">

                    @Html.LabelFor(model => model.Summary)

                </div>

                <div class="editor-field" style="font-size:12px">

                    @Html.TextAreaFor(model => model.Summary, new { @id="summaryEntry", @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Summary)

                </div>


                <div class="editor-label">

                    @Html.LabelFor(model => model.Note)

                </div>

                <div class="editor-field" style="font-size:12px">

                    @Html.TextAreaFor(model => model.Note, new { @id = "noteEntry", @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Note)

                </div>
            </div>

            <p style="margin-top:1.5rem">

            <p style="margin-top:1.5rem">

                @if (ViewBag.IsUpdate == true)

                {

                    <input type="submit" value="Update" id="btnUpdate" name="cmd" class="btn btn-secondary pi-draggable" />
                    <input type="button" value="Cancel" id="btncancelEdit" class="btn btn-danger pi-draggable" />
                }

                else

                {

                    <input type="submit" value="Save" id="btnSave" name="cmd" class="btn btn-secondary pi-draggable" />
                    <input type="button" value="Cancel" id="btncancelCreate" class="btn btn-danger pi-draggable" />
                }

            </p>

            </p>

        </fieldset>
        </div>

        <script type="text/javascript">
            $(document).ready(function () {

                $('textarea').each(function () {
                    this.setAttribute('style', 'height:' + (this.scrollHeight) + 'px;');
                }).on('input', function () {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });

                $('#regionDropDown').change(function () {
                    var regionChosen = $(this).val();
                    var countryChosen = $("#countryDropDown").val();
                    $.ajax({
                        url: '@Url.Action("GetSelectCountriesList")',
                        type: 'GET',
                        data: {
                            regionID: regionChosen,
                            countryID: countryChosen
                        },
                        cache: false,
                        success: function (result) {
                            //We will add the options here now.
                            var countryDropDown = $("#countryDropDown");
                            countryDropDown.empty();
                            countryDropDown.append(result);
                        }
                    });
                });

                $('#regionDropDown').trigger('change');

            });
        </script>
}